
#if !defined(BLENDWEIGHTS_IN)
#define BLENDWEIGHTS_IN 1
#endif
#if !defined(BLENDWEIGHTS_OUT)
#define BLENDWEIGHTS_OUT 1
#endif
#if !defined(PREVPOS_OUT)
#define PREVPOS_OUT 1
#endif

#include "../../../mp.fxh/MREInputElements.fxh"

StructuredBuffer<float2> TimeP;
Texture2D<float4> Matrices;
float BoneCount = 60;
int FrameCount = 100;
float keepInCenter = 0;
int rootmatrix = 0;

SamplerState s0
{
    Filter = MIN_MAG_MIP_LINEAR;
    AddressU = Wrap;
    AddressV = Wrap;
};

float4 LoadLinearH(Texture2D tex, float uvx, int uvy, int width)
{
	int3 uv1 = 0;
	uv1.x = floor(uvx);
	uv1.y = uvy;
	int3 uv2 = 0;
	uv2.x = (floor(uvx)+1)%width;
	uv2.y = uvy;
	float bld = frac(uvx);
	float4 c1 = tex.Load(uv1);
	float4 c2 = tex.Load(uv2);
	return lerp(c1,c2,bld);
}
float4x4 SkinningMatrixS(float bi, float time)
{
	float t = time*FrameCount;
	float p = 1/(BoneCount*4);
	float4 mr0 = Matrices.SampleLevel(s0,float2(time, (bi*4+.5  )*p), 0);
	float4 mr1 = Matrices.SampleLevel(s0,float2(time, (bi*4+.5+1)*p), 0);
	float4 mr2 = Matrices.SampleLevel(s0,float2(time, (bi*4+.5+2)*p), 0);
	float4 mr3 = Matrices.SampleLevel(s0,float2(time, (bi*4+.5+3)*p), 0);
	float4x4 outm = 0;
	for(float i=0; i<4; i++)
	{
		outm[0][i] = mr0[i];
		outm[1][i] = mr1[i];
		outm[2][i] = mr2[i];
		outm[3][i] = mr3[i];
	}
	return outm;
}
float4x4 SkinningMatrixL(float bi, float time)
{
	float t = time*FrameCount;
	float4 mr0 = LoadLinearH(Matrices, t, bi*4  , FrameCount);
	float4 mr1 = LoadLinearH(Matrices, t, bi*4+1, FrameCount);
	float4 mr2 = LoadLinearH(Matrices, t, bi*4+2, FrameCount);
	float4 mr3 = LoadLinearH(Matrices, t, bi*4+3, FrameCount);
	float4x4 outm = 0;
	for(float i=0; i<4; i++)
	{
		outm[0][i] = mr0[i];
		outm[1][i] = mr1[i];
		outm[2][i] = mr2[i];
		outm[3][i] = mr3[i];
	}
	return outm;
}

GSin VSs(VSin input)
{
    GSin output;
	float4 bldw = input.BlendWeight;
	float4 bldi = input.BlendId;
	uint ii = 0;
	#if defined(SUBSETID_IN)
		ii = input.SubsetID;
	#else
		ii = input.iid;
	#endif
	float4 pos = float4(0,0,0,1);
	float4 ppos = float4(0,0,0,1);
	float3 norm = 0;
	for (int i = 0; i < 4; i++)
	{
		float4x4 matr = SkinningMatrixS(bldi[i],TimeP[ii].x);
		float4x4 pmatr = SkinningMatrixS(bldi[i],TimeP[ii].y);
		pos = pos + mul(float4(input.cpoint.xyz,1), matr) * bldw[i];
		ppos = ppos + mul(float4(input.cpoint.xyz,1), pmatr) * bldw[i];
		norm = norm + mul(input.norm, matr) * bldw[i];
		#if defined(TANGENTS_IN) && defined(TANGENTS_OUT)
			output.Tangent += mul(float4(input.Tangent,0), matr) * bldw[i];
			output.Binormal += mul(float4(input.Binormal,0), matr) * bldw[i];
		#endif
	}
	#if defined(TANGENTS_IN) && defined(TANGENTS_OUT)
		output.Tangent = normalize(output.Tangent);
		output.Binormal = normalize(output.Binormal);
	#endif
	float4x4 matr = SkinningMatrixS(rootmatrix,TimeP[ii].x);
	float4x4 pmatr = SkinningMatrixS(rootmatrix,TimeP[ii].y);
	pos.x -= matr[3][0]*keepInCenter;
	pos.y -= matr[3][1]*keepInCenter;
	pos.z -= matr[3][2]*keepInCenter;
	ppos.x -= pmatr[3][0]*keepInCenter;
	ppos.y -= pmatr[3][1]*keepInCenter;
	ppos.z -= pmatr[3][2]*keepInCenter;
	// input.cpoint+
    output.cpoint = pos;
	output.PrevPos = ppos;
	//output.cpoint = float4(input.cpoint,1);
	output.norm = normalize(norm);
	#if defined(TEXCOORD_IN) && defined(TEXCOORD_OUT)
		output.TexCd = input.TexCd;
	#endif
	output.BlendId = bldi;
	
	#if defined(SUBSETID_OUT)
		output.SubsetID = ii;
	#endif
	output.BlendWeight = bldw;
	
    return output;
}

GSin VSl(VSin input)
{
    GSin output;
	float4 bldw = input.BlendWeight;
	float4 bldi = input.BlendId;
	uint ii = 0;
	#if defined(SUBSETID_IN)
		ii = input.SubsetID;
	#else
		ii = input.iid;
	#endif
	float4 pos = float4(0,0,0,1);
	float4 ppos = float4(0,0,0,1);
	float3 norm = 0;
	for (int i = 0; i < 4; i++)
	{
		float4x4 matr = SkinningMatrixS(bldi[i],TimeP[ii].x);
		pos = pos + mul(float4(input.cpoint.xyz,1), matr) * bldw[i];
		ppos = ppos + mul(float4(input.cpoint.xyz,1), SkinningMatrixS(bldi[i],TimeP[ii].y)) * bldw[i];
		norm = norm + mul(input.norm, matr) * bldw[i];
		
		#if defined(TANGENTS_IN) && defined(TANGENTS_OUT)
			output.Tangent += mul(float4(input.Tangent,0), matr) * bldw[i];
			output.Binormal += mul(float4(input.Binormal,0), matr) * bldw[i];
		#endif
	}
	#if defined(TANGENTS_IN) && defined(TANGENTS_OUT)
		output.Tangent = normalize(output.Tangent);
		output.Binormal = normalize(output.Binormal);
	#endif
	// input.cpoint+
    output.cpoint = pos;
	output.PrevPos = ppos;
	//output.cpoint = float4(input.cpoint,1);
	output.norm = normalize(norm);
	#if defined(TEXCOORD_IN) && defined(TEXCOORD_OUT)
		output.TexCd = input.TexCd;
	#endif
	output.BlendId = bldi;
	output.BlendWeight = bldw;
	
	#if defined(SUBSETID_OUT)
		output.SubsetID = ii;
	#endif
    return output;
}



[maxvertexcount(3)]
void GS(triangle GSin input[3], inout TriangleStream<GSin>GSOut)
{
	GSin v;

	for(uint i=0;i<3;i++)
	{
		v=input[i];
		GSOut.Append(v);
	}
}

GeometryShader StreamOutGS = ConstructGSWithSO( CompileShader( gs_5_0, GS() ),
	"SV_Position.xyz;"
	"NORMAL.xyz"
	#if defined(TEXCOORD_OUT)
		";TEXCOORD0.xy"
	#endif
	#if defined(TANGENTS_OUT)
		";TANGENT.xyz"
		";BINORMAL.xyz"
	#endif
	#if defined(BLENDWEIGHTS_OUT)
		";BLENDINDICES.xyzw"
		";BLENDWEIGHT.xyzw"
	#endif
	#if defined(PREVPOS_OUT)
		";PREVPOS.xyz"
	#endif
	#if defined(SUBSETID_OUT)
		";SUBSETID.x"
	#endif
);

technique11 SampleMatrix
{
	pass P0
	{
		
		SetVertexShader( CompileShader( vs_5_0, VSs() ) );
		SetGeometryShader( CompileShader( gs_5_0, GS() ) );
	    SetGeometryShader( StreamOutGS );

	}
}
/*
technique11 LoadMatrix
{
	pass P0
	{
		
		SetVertexShader( CompileShader( vs_5_0, VSl() ) );
		SetGeometryShader( CompileShader( gs_5_0, GS() ) );
	    SetGeometryShader( StreamOutGS );

	}
}
*/
