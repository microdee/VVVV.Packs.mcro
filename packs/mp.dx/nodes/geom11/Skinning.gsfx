
#if !defined(BLENDWEIGHTS_IN)
#define BLENDWEIGHTS_IN 1
#endif
#if !defined(BLENDWEIGHTS_OUT)
#define BLENDWEIGHTS_OUT 1
#endif
/*
#if !defined(PREVPOS_OUT)
#define PREVPOS_OUT 1
#endif
*/
#include "../../../mp.fxh/MREInputElements.fxh"

StructuredBuffer<float4x4> SkinningMatrices;
StructuredBuffer<float4x4> PrevSkinningMatrices;
float BoneCount = 60;
float PrevPosMul = 1;
float4x4 PreTr;

GSin VS(VSin input)
{
    GSin output = (GSin)0;
	float4 bldw = input.BlendWeight;
	float4 bldi = input.BlendId+input.iid*BoneCount;
	float3 opos = mul(input.cpoint, PreTr).xyz;
	float4 pos = float4(0,0,0,1);
	float4 ppos = float4(0,0,0,1);
	float3 norm = 0;
	for (int i = 0; i < 4; i++)
	{
		pos = pos + mul(float4(opos,1), SkinningMatrices[bldi[i]]) * bldw[i];
		ppos = ppos + mul(float4(opos,1), PrevSkinningMatrices[bldi[i]]) * bldw[i];
		norm = norm + mul(float4(input.norm,0), SkinningMatrices[bldi[i]]) * bldw[i];
		
		#if defined(TANGENTS_IN) && defined(TANGENTS_OUT)
			output.Tangent += mul(float4(input.Tangent,0), SkinningMatrices[bldi[i]]) * bldw[i];
			output.Binormal += mul(float4(input.Binormal,0), SkinningMatrices[bldi[i]]) * bldw[i];
		#endif
	}
	#if defined(TANGENTS_IN) && defined(TANGENTS_OUT)
		output.Tangent = normalize(output.Tangent);
		output.Binormal = normalize(output.Binormal);
	#endif
	// input.cpoint+
    output.cpoint = pos;
	//output.cpoint = float4(input.cpoint,1);
	output.norm = normalize(norm);

	#if defined(TEXCOORD_IN) && defined(TEXCOORD_OUT)
		output.TexCd = input.TexCd;
	#endif
	output.BlendId = bldi;
	#if defined(PREVPOS_OUT)
		output.PrevPos = pos - (pos-ppos)*PrevPosMul;
	#endif
	float sid = 0;
	#if defined(SUBSETID_IN)
		sid = input.SubsetID;
	#else
		sid = input.iid;
	#endif
	
	#if defined(SUBSETID_OUT)
		output.SubsetID = sid;
	#endif
	output.BlendWeight = bldw;
	
    return output;
}



[maxvertexcount(3)]
void GS(triangle GSin input[3], inout TriangleStream<GSin>GSOut)
{
	GSin v;

	for(uint i=0;i<3;i++)
	{
		v=input[i];
		GSOut.Append(v);
	}
}

GeometryShader StreamOutGS = ConstructGSWithSO( CompileShader( gs_5_0, GS() ),
	"POSITION.xyz;"
	"NORMAL.xyz"
	#if defined(TEXCOORD_OUT)
		";TEXCOORD0.xy"
	#endif
	#if defined(TANGENTS_OUT)
		";TANGENT.xyz"
		";BINORMAL.xyz"
	#endif
	#if defined(BLENDWEIGHTS_OUT)
		";BLENDINDICES.xyzw"
		";BLENDWEIGHT.xyzw"
	#endif
	#if defined(PREVPOS_OUT)
		";PREVPOS.xyz"
	#endif
	#if defined(SUBSETID_OUT)
		";SUBSETID.x"
	#endif
);

technique11 MeshJoin
{
	pass P0
	{
		
		SetVertexShader( CompileShader( vs_5_0, VS() ) );
		SetGeometryShader( CompileShader( gs_5_0, GS() ) );
	    SetGeometryShader( StreamOutGS );

	}
}
